// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ENTITY_ODB_HXX
#define ENTITY_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Entity.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Entity
  //
  template <>
  struct class_traits< ::Entity >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Entity >
  {
    public:
    typedef ::Entity object_type;
    typedef ::Entity* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Entity
  //
  template <typename A>
  struct query_columns< ::Entity, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    id_type_;

    static const id_type_ id;

    // world_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    world_id_type_;

    static const world_id_type_ world_id;

    // x
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    x_type_;

    static const x_type_ x;

    // y
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    y_type_;

    static const y_type_ y;

    // z
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    z_type_;

    static const z_type_ z;

    // x_grid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    x_grid_type_;

    static const x_grid_type_ x_grid;

    // y_grid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    y_grid_type_;

    static const y_grid_type_ y_grid;

    // body_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    body_id_type_;

    static const body_id_type_ body_id;

    // upcast_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    upcast_id_type_;

    static const upcast_id_type_ upcast_id;
  };

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::id_type_
  query_columns< ::Entity, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::world_id_type_
  query_columns< ::Entity, id_pgsql, A >::
  world_id (A::table_name, "\"world_id\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::x_type_
  query_columns< ::Entity, id_pgsql, A >::
  x (A::table_name, "\"x\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::y_type_
  query_columns< ::Entity, id_pgsql, A >::
  y (A::table_name, "\"y\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::z_type_
  query_columns< ::Entity, id_pgsql, A >::
  z (A::table_name, "\"z\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::x_grid_type_
  query_columns< ::Entity, id_pgsql, A >::
  x_grid (A::table_name, "\"x_grid\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::y_grid_type_
  query_columns< ::Entity, id_pgsql, A >::
  y_grid (A::table_name, "\"y_grid\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::body_id_type_
  query_columns< ::Entity, id_pgsql, A >::
  body_id (A::table_name, "\"body_id\"", 0);

  template <typename A>
  const typename query_columns< ::Entity, id_pgsql, A >::upcast_id_type_
  query_columns< ::Entity, id_pgsql, A >::
  upcast_id (A::table_name, "\"upcast_id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::Entity, id_pgsql, A >:
    query_columns< ::Entity, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Entity, id_pgsql >:
    public access::object_traits< ::Entity >
  {
    public:
    struct id_image_type
    {
      int id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _id
      //
      int _id_value;
      bool _id_null;

      // _world_id
      //
      int _world_id_value;
      bool _world_id_null;

      // _x
      //
      float _x_value;
      bool _x_null;

      // _y
      //
      float _y_value;
      bool _y_null;

      // _z
      //
      float _z_value;
      bool _z_null;

      // _x_grid
      //
      int _x_grid_value;
      bool _x_grid_null;

      // _y_grid
      //
      int _y_grid_value;
      bool _y_grid_null;

      // _body_id
      //
      int _body_id_value;
      bool _body_id_null;

      // _upcast_id
      //
      int _upcast_id_value;
      bool _upcast_id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Entity, id_common >:
    public access::object_traits_impl< ::Entity, id_pgsql >
  {
  };

  // Entity
  //
}

#include "Entity-odb.ixx"

#include <odb/post.hxx>

#endif // ENTITY_ODB_HXX
